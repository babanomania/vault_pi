---
- name: Check if {{ display.scripts_path }} directory exists
  stat:
    path: "{{ base_path }}/{{ display.scripts_path }}"
  register: display_lib

- name: Ensure {{ display.scripts_path }} directory exists
  become: true
  become_user: "{{ ansible_user }}"
  file:
    path: "{{ base_path }}/{{ display.scripts_path }}"
    state: directory
  when: display_lib.stat.exists == False
  notify: "waveshare init"

- name: Ensure show-label project is copied
  become: true
  become_user: "{{ ansible_user }}"
  synchronize:
    src: data/show-label
    dest: "{{ base_path }}/{{ display.scripts_path }}"
    rsync_opts:
      - "--exclude=.j2"

- name: Ensure do_clean is copied
  become: true
  become_user: "{{ ansible_user }}"
  template:
    src: data/show-label/do_clean.sh.j2
    dest: "{{ base_path }}/{{ display.scripts_path }}/show-label/do_clean.sh"
    mode: u=rw,g=rx,o=rx

- name: Ensure do_refresh is copied
  become: true
  become_user: "{{ ansible_user }}"
  template:
    src: data/show-label/do_refresh.sh.j2
    dest: "{{ base_path }}/{{ display.scripts_path }}/show-label/do_refresh.sh"
    mode: u=rw,g=rx,o=rx

- name: Remove template files
  file:
    path:
      - "{{ base_path }}/{{ display.scripts_path }}/show-label/do_clean.sh.j2"
      - "{{ base_path }}/{{ display.scripts_path }}/show-label/do_refresh.sh.j2"
    state: absent

- name: Ensure a display refresh job runs periodically
  become: true
  become_user: "{{ ansible_user }}"
  cron:
    name: "refresh display"
    minute: "{{ display.schedule.minute }}"
    hour: "{{ display.schedule.hour }}"
    job: "sudo sh {{ base_path }}/{{ display.scripts_path }}/show-label/do_refresh.sh > /dev/null 2>&1"

- name: Ensure a clear display on reboot
  become: true
  become_user: "{{ ansible_user }}"
  cron:
    name: "reset display"
    job: "sudo sh {{ base_path }}/{{ display.scripts_path }}/show-label/do_clean.sh > /dev/null 2>&1"
    special_time: reboot
